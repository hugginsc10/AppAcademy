# == Schema Information
#
# Table name: questions
#
#  id         :bigint           not null, primary key
#  text       :string           not null
#  poll_id    :integer          not null
#  created_at :datetime         not null
#  updated_at :datetime         not null
#

class Question < ApplicationRecord
    validates :text, presence: true

    has_many :answer_choices,
    class_name: 'AnswerChoice',
    primary_key: :id,
    foreign_key: :question_id

    belongs_to :poll,
    class_name: 'Poll',
    primary_key: :id,
    foreign_key: :poll_id

    has_many :responses,
    through: :answer_choices,
    source: :responses

    def results
        results = {}
        self.answer_choices.each do |choices|
            results[choices.text] = choices.responses.count
        end
        results
    end

    def second_results
        results = {}
        self.answer_choices.includes(:responses).each do |choices|
            results[choices.text] = choices.responses.length
        end
        results
    end

    def third_results
      choices = AnswerChoice.find_by_sql([<<-SQL, id])
      SELECT
        answer_choices.text, COUNT(responses.id)
      FROM
        answer_choices
          LEFT OUTER JOIN responses ON responses.answer_choice_id
      WHERE
          answer_choices.question_id = ?
      GROUP BY answer_choices.id
      SQL

    end

end












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































